<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  
  <!-- EN:
    <li>damaged_inf->bite</li>
    <li>damaged_inf->chomp</li>
    <li>damaged_inf(p=0.5)->nip</li>
    <li>damaged_past->bit</li>
    <li>damaged_past->chomped</li>
    <li>damaged_past->nipped</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_present->biting</li>
    <li>damaged_present->chomping</li>
    <li>damaged_present->nipped</li>
    <li>damaged_present->gnawing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>
    <li>destroyed_past->devoured</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_past->ravaged</li>
    <li>destroyed_present->devouring</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->ripping</li>
    <li>destroyed_present->ravaging</li>
    <li>destroyed_suffix->[to] shreds</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
  -->
  <Maneuver_Bite.rulePack.rulesStrings>
    <li>damaged_inf->mordre</li>
    <li>damaged_inf->déchiqueter</li>
    <li>damaged_inf(p=0.5)->pincer</li>
    <li>damaged_past->mordu</li>
    <li>damaged_past->déchiqueté</li>
    <li>damaged_past->pincé</li>
    <li>damaged_past->rongé</li>
    <li>damaged_past(deflected!=True)->déchiré</li>
    <li>damaged_present->mordant</li>
    <li>damaged_present->déchiquetant</li>
    <li>damaged_present->pincant</li>
    <li>damaged_present->rongeant</li>
    <li>damaged_present(deflected!=True)->déchirant</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->exposant la chair en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->exposant la machinerie en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant des lacérations horribles sur la peau</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->laissant des lacérations horribles sur le métal</li>
    <li>destroyed_past->dévoré</li>
    <li>destroyed_past->séparé</li>
    <li>destroyed_past->déchiré</li>
    <li>destroyed_past->ravagé</li>
    <li>destroyed_present->dévorant</li>
    <li>destroyed_present->séparant</li>
    <li>destroyed_present->déchirant</li>
    <li>destroyed_present->ravageant</li>
    <li>destroyed_suffix->[to] lambeaux</li>
    <li>destroyed_suffix->[to] pièces</li>
    <li>destroyed_suffix->[to] lanières</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] lanières désordonnées</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] un amas méconnaissable</li>
  </Maneuver_Bite.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] a essayé de jeter [TOOL_label] dans l'œil de [RECIPIENT_definite], mais [RECIPIENT_definite] a esquivé.</li>
    <li>r_logentry->[INITIATOR_definite] a essayé de jeter [TOOL_label] dans l'œil de [RECIPIENT_definite], mais [RECIPIENT_definite] l'a bloqué(e).</li>
  </Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] a jeté [TOOL_label] dans l'œil de [RECIPIENT_definite].</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] a aspergé l'œil de [RECIPIENT_definite] avec [TOOL_label].</li>
  </Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] a essayé de jeter [TOOL_label] dans l'œil de [RECIPIENT_definite], mais l'a raté.</li>
  </Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=2)->poke</li>
    <li>damaged_inf(p=2)->jab</li>
    <li>damaged_inf->prod</li>
    <li>damaged_inf->shove</li>
    <li>damaged_inf->stab</li>
    <li>damaged_past(p=2)->poked</li>
    <li>damaged_past(p=2)->jabbed</li>
    <li>damaged_past->prodded</li>
    <li>damaged_past->shoved</li>
    <li>damaged_past->stabbed</li>
    <li>damaged_present(p=2)->poking</li>
    <li>damaged_present(p=2)->jabbing</li>
    <li>damaged_present->prodding</li>
    <li>damaged_present->shoving</li>
    <li>damaged_present->stabbing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Poke.rulePack.rulesStrings>
    <li>damaged_inf(p=2)->piquer</li>
    <li>damaged_inf(p=2)->cogner</li>
    <li>damaged_inf->pousser</li>
    <li>damaged_inf->bousculer</li>
    <li>damaged_inf->poignarder</li>
    <li>damaged_past(p=2)->piqué</li>
    <li>damaged_past(p=2)->frappé</li>
    <li>damaged_past->poussé</li>
    <li>damaged_past->bousculé</li>
    <li>damaged_past->poignardé</li>
    <li>damaged_present(p=2)->piquant</li>
    <li>damaged_present(p=2)->frappant</li>
    <li>damaged_present->poussant</li>
    <li>damaged_present->bousculant</li>
    <li>damaged_present->poignardant</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une énorme contusion</li>
    <li>flavortext_consequence->laissant la zone visiblement déformée</li>
    <li>flavortext_consequence->désiquilibrant [RECIPIENT_definite]</li>
    <li>flavortext_consequence->l'envoyant sur le côté</li>
    <li>destroyed_past->anéanti</li>
    <li>destroyed_past->écrasé</li>
    <li>destroyed_past->écrabouillé</li>
    <li>destroyed_past->annihilé</li>
    <li>destroyed_past->cassé</li>
    <li>destroyed_present->anéantissant</li>
    <li>destroyed_present->écrasant</li>
    <li>destroyed_present->écrabouillant</li>
    <li>destroyed_present->annihilant</li>
    <li>destroyed_present->cassant</li>
    <li>destroyed_suffix->[to] pièces</li>
    <li>destroyed_suffix->[to] morceaux</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] poussières</li>
    <li>destroyed_suffix->[to] fragments</li>
  </Maneuver_Poke.rulePack.rulesStrings>
  
  <!-- EN:
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
  -->
  <Maneuver_Scratch.rulePack.rulesStrings>
    <li>woundname->blessure</li>
    <li>woundname(p=0.3)->plaie</li>
    <li>flavortext_situation(RECIPIENT_flesh!=Mechanoid)->avec du sang coulant de la [woundname]</li>
    <li>flavortext_situation->avec du liquide coulant de la [woundname]</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->et exposant la chair en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->et exposant la machinerie en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->et laissant une [woundname] sanglante</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] lanières désordonnées</li>
    <li>destroyed_suffix->[to] lambeaux</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] pièces désordonnées</li>
    <li>destroyed_suffix->[to] pièces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] un amas de sang</li>
  </Maneuver_Scratch.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->scratch</li>
    <li>damaged_inf(deflected!=True)->lacerate</li>
    <li>damaged_inf(deflected!=True)->tear</li>
    <li>damaged_inf->cut</li>
    <li>damaged_past(p=4)->scratched</li>
    <li>damaged_past(deflected!=True)->lacerated</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_past->cut</li>
    <li>damaged_present->scratching</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present->cutting</li>
    <li>destroyed_past->mauled</li>
    <li>destroyed_past->lacerated</li>
    <li>destroyed_past->tore off</li>
    <li>destroyed_past->shredded</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_present->mauling</li>
    <li>destroyed_present->lacerating</li>
    <li>destroyed_present->tearing off</li>
    <li>destroyed_present->shredding</li>
    <li>destroyed_present->ripping</li>
  -->
  <Maneuver_Scratch_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->égratigner</li>
    <li>damaged_inf(deflected!=True)->lacérer</li>
    <li>damaged_inf(deflected!=True)->déchirer</li>
    <li>damaged_inf->couper</li>
    <li>damaged_past(p=4)->égratigné</li>
    <li>damaged_past(deflected!=True)->lacéré</li>
    <li>damaged_past(deflected!=True)->déchiré</li>
    <li>damaged_past->coupé</li>
    <li>damaged_present->égratignant</li>
    <li>damaged_present(deflected!=True)->lacérant</li>
    <li>damaged_present(deflected!=True)->déchirant</li>
    <li>damaged_present->coupant</li>
    <li>destroyed_past->mutilé</li>
    <li>destroyed_past->lacéré</li>
    <li>destroyed_past->arraché</li>
    <li>destroyed_past->broyé</li>
    <li>destroyed_past->déchiqueté</li>
    <li>destroyed_present->mutilant</li>
    <li>destroyed_present->lacérant</li>
    <li>destroyed_present->arrachant</li>
    <li>destroyed_present->broyant</li>
    <li>destroyed_present->déchiquetant</li>
  </Maneuver_Scratch_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->slash</li>
    <li>damaged_inf->cut</li>
    <li>damaged_inf->chop</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->slice</li>
    <li>damaged_inf(deflected!=True)->gash</li>
    <li>damaged_past(p=4)->slashed</li>
    <li>damaged_past->cut</li>
    <li>damaged_past->chopped</li>
    <li>damaged_past->hacked</li>
    <li>damaged_past->sliced</li>
    <li>damaged_past(deflected!=True)->gashed</li>
    <li>damaged_present->slashing</li>
    <li>damaged_present->cutting</li>
    <li>damaged_present->slicing</li>
    <li>damaged_present(deflected!=True)->gashing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>
    <li>destroyed_past->bisected</li>
    <li>destroyed_past->divided</li>
    <li>destroyed_past->halved</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->split</li>
    <li>destroyed_present->bisecting</li>
    <li>destroyed_present->dividing</li>
    <li>destroyed_present->halving</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->splitting</li>
    <li>destroyed_suffix->into neat pieces</li>
    <li>destroyed_suffix->cleanly</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
  -->
  <Maneuver_Slash.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->entailler</li>
    <li>damaged_inf->couper</li>
    <li>damaged_inf->découper</li>
    <li>damaged_inf->hacher</li>
    <li>damaged_inf->trancher</li>
    <li>damaged_inf(deflected!=True)->balafrer</li>
    <li>damaged_past(p=4)->entaillé</li>
    <li>damaged_past->coupé</li>
    <li>damaged_past->découpé</li>
    <li>damaged_past->haché</li>
    <li>damaged_past->tranché</li>
    <li>damaged_past(deflected!=True)->balafré</li>
    <li>damaged_present->entaillant</li>
    <li>damaged_present->coupant</li>
    <li>damaged_present->tranchant</li>
    <li>damaged_present(deflected!=True)->balafrant</li>
    <li>damaged_present(deflected!=True)->déchirant</li>
    <li>damaged_present(deflected!=True)->lacérant</li>
    <li>woundname->coupure</li>
    <li>woundname(p=0.3)->plaie</li>
    <li>flavortext_situation(RECIPIENT_flesh!=Mechanoid)->avec du sang coulant de la [woundname]</li>
    <li>flavortext_situation->avec du liquide coulant de la [woundname]</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->exposant la chair en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh==Mechanoid)->exposant la machinerie en dessous</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une [woundname] sanglante</li>
    <li>destroyed_past->fendu</li>
    <li>destroyed_past->divisé</li>
    <li>destroyed_past->coupé</li>
    <li>destroyed_past->séparé</li>
    <li>destroyed_past->débité</li>
    <li>destroyed_present->fendant</li>
    <li>destroyed_present->divisant</li>
    <li>destroyed_present->coupant</li>
    <li>destroyed_present->séparant</li>
    <li>destroyed_present->débitant</li>
    <li>destroyed_suffix->en morceaux bien nets</li>
    <li>destroyed_suffix->proprement</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposant ses organes internes</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->le tranchant en deux</li>
  </Maneuver_Slash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Smash.rulePack.rulesStrings>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une énorme contusion</li>
    <li>flavortext_consequence->laissant la zone visiblement déformée</li>
    <li>flavortext_consequence->désiquilibrant [RECIPIENT_definite]</li>
    <li>flavortext_consequence->l'envoyant sur le côté</li>
    <li>destroyed_suffix->[to] pièces</li>
    <li>destroyed_suffix->[to] morceaux</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid)->[to] poussières</li>
    <li>destroyed_suffix->[to] fragments</li>
  </Maneuver_Smash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->smash</li>
    <li>damaged_inf->bash</li>
    <li>damaged_inf->clobber</li>
    <li>damaged_inf->slam</li>
    <li>damaged_inf->strike</li>
    <li>damaged_past(p=4)->smashed</li>
    <li>damaged_past->bashed</li>
    <li>damaged_past->clobbered</li>
    <li>damaged_past->slammed</li>
    <li>damaged_past->struck</li>
    <li>damaged_present->smashing</li>
    <li>damaged_present->bashing</li>
    <li>damaged_present->clobbering</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
  -->
  <Maneuver_Smash_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->écraser</li>
    <li>damaged_inf->tabasser</li>
    <li>damaged_inf->assommer</li>
    <li>damaged_inf->démolir</li>
    <li>damaged_inf->écrabouiller</li>
    <li>damaged_past(p=4)->écrasé</li>
    <li>damaged_past->tabassé</li>
    <li>damaged_past->assomé</li>
    <li>damaged_past->démoli</li>
    <li>damaged_past->frappé</li>
    <li>damaged_present->écrasant</li>
    <li>damaged_present->tabassant</li>
    <li>damaged_present->assomant</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>damaged_present(deflected!=True)->lacérant</li>
    <li>destroyed_past->anéanti</li>
    <li>destroyed_past->écrasé</li>
    <li>destroyed_past->écrabouillé</li>
    <li>destroyed_past->annihilé</li>
    <li>destroyed_past->cassé</li>
    <li>destroyed_present->anéantissant</li>
    <li>destroyed_present->écrasant</li>
    <li>destroyed_present->écrabouillant</li>
    <li>destroyed_present->annihilant</li>
    <li>destroyed_present->cassant</li>
  </Maneuver_Smash_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->stab</li>
    <li>damaged_inf->jab</li>
    <li>damaged_inf(deflected!=True)->pierce</li>
    <li>damaged_inf(deflected!=True)->puncture</li>
    <li>damaged_inf(deflected!=True)->skewer</li>
    <li>damaged_past(p=4)->stabbed</li>
    <li>damaged_past->jabbed</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->punctured</li>
    <li>damaged_past(deflected!=True)->skewered</li>
    <li>damaged_present(deflected!=True)->piercing</li>
    <li>damaged_present(deflected!=True)->puncturing</li>
    <li>damaged_present(deflected!=True)->penetrating</li>
    <li>damaged_present(deflected!=True)->skewering</li>
    <li>woundname->hole</li>
    <li>woundname->wound</li>
    <li>woundname->crevice</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
    <li>destroyed_past->impaled</li>
    <li>destroyed_past->perforated</li>
    <li>destroyed_past->skewered</li>
    <li>destroyed_present->impaling</li>
    <li>destroyed_present->perforating</li>
    <li>destroyed_present->skewering</li>
    <li>destroyed_suffix->straight through</li>
    <li>destroyed_suffix->leaving a clean hole</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
  -->
  <Maneuver_Stab.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->piquer</li>
    <li>damaged_inf->percer</li>
    <li>damaged_inf(deflected!=True)->transpercer</li>
    <li>damaged_inf(deflected!=True)->perforer</li>
    <li>damaged_inf(deflected!=True)->embrocher</li>
    <li>damaged_past(p=4)->piqué</li>
    <li>damaged_past->frappé</li>
    <li>damaged_past(deflected!=True)->transpercé</li>
    <li>damaged_past(deflected!=True)->perforé</li>
    <li>damaged_past(deflected!=True)->embroché</li>
    <li>damaged_present(deflected!=True)->transperçant</li>
    <li>damaged_present(deflected!=True)->perforant</li>
    <li>damaged_present(deflected!=True)->perçant</li>
    <li>damaged_present(deflected!=True)->embrochant</li>
    <li>woundname->perforation</li>
    <li>woundname->plaie</li>
    <li>woundname->blessure</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une [woundname] sanglante</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une déchirure</li>
    <li>flavortext_consequence(RECIPIENT_flesh!=Mechanoid)->laissant une [woundname] saignante</li>
    <li>destroyed_past->empalé</li>
    <li>destroyed_past->transpercé</li>
    <li>destroyed_past->embroché</li>
    <li>destroyed_present->empalant</li>
    <li>destroyed_present->transperçant</li>
    <li>destroyed_present->embrochant</li>
    <li>destroyed_suffix->de part en part</li>
    <li>destroyed_suffix->laissant un trou bien net</li>
    <li>destroyed_suffix(RECIPIENT_flesh!=Mechanoid,target_part_destroyed_count==1)->laissant couler des liquides horribles</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->laissant couler des liquides méconnaissables</li>
  </Maneuver_Stab.rulePack.rulesStrings>
  
</LanguageData>