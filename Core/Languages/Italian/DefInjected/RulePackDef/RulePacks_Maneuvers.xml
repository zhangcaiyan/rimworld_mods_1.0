<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  
  <!-- EN:
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>
    <li>damaged_past->bit</li>
    <li>damaged_past->chomped</li>
    <li>damaged_past->nipped</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->tore</li>
	<li>damaged_inf->bite</li>
    <li>damaged_inf->chomp</li>
    <li>damaged_inf(p=0.5)->nip</li>
    <li>damaged_present->biting</li>
    <li>damaged_present->chomping</li>
    <li>damaged_present->nipped</li>
    <li>damaged_present->gnawing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>destroyed_past->devoured</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_past->ravaged</li>   
    <li>destroyed_present->devouring</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->ripping</li>
    <li>destroyed_present->ravaging</li>	
    <li>destroyed_suffix->[to] shreds</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
  -->
  <Maneuver_Bite.rulePack.rulesStrings>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->esponendo la carne sottostante</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->esponendo i congegni sottostanti</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando orribili sfregi sulla pelle</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->lasciando orribili sfregi sul metallo</li>
    <li>damaged_past->morso</li>
    <li>damaged_past->morsicato</li>
    <li>damaged_past->azzannato</li>
    <li>damaged_past->rosicchiato</li>
    <li>damaged_past(deflected!=True)->lacerato</li>
	<li>damaged_inf->mordere</li>
    <li>damaged_inf->morsicare</li>
    <li>damaged_inf(p=0.5)->azzannare</li>
    <li>damaged_present->mordendo</li>
    <li>damaged_present->morsicando</li>
    <li>damaged_present->azzannando</li>
    <li>damaged_present->rosicchiando</li>
    <li>damaged_present(deflected!=True)->lacerando</li>
    <li>destroyed_past->divorato</li>
    <li>destroyed_past->fatto a pezzi</li>
    <li>destroyed_past->squartato</li>
    <li>destroyed_past->straziato</li>
    <li>destroyed_present->divorando</li>
    <li>destroyed_present->facendo a pezzi</li>
    <li>destroyed_present->squartando</li>
    <li>destroyed_present->straziando</li>
    <li>destroyed_suffix->a brandelli</li>
    <li>destroyed_suffix->a pezzi</li>
    <li>destroyed_suffix->a strisce</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in miseri brandelli</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in un casino irriconoscibile</li>
  </Maneuver_Bite.rulePack.rulesStrings>
  
  <!-- EN:
	<li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>    
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
	<li>r_logentry->[INITIATOR_definite] ha provato a lanciare [TOOL_label] negli occhi di [RECIPIENT_definite], but [RECIPIENT_definite] ha schivato levandosi dai piedi.</li>
    <li>r_logentry->[INITIATOR_definite] ha provato a lanciare [TOOL_label] negli occhi di [RECIPIENT_definite], but [RECIPIENT_definite] ha bloccato.</li>
  </Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
  
  <!-- EN:
 	<li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>   
    <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
	<li>r_logentry->[INITIATOR_definite] ha lanciato [TOOL_label] negli occhi di [RECIPIENT_definite].</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] ha lanciato uno spruzzo di [TOOL_label] negli occhi di [RECIPIENT_definite].</li>
  </Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
  
  <!-- EN:
 	<li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
	<li>r_logentry->[INITIATOR_definite] ha provato a lanciare [TOOL_label] negli occhi di [RECIPIENT_definite], ma ha mancato.</li>
  </Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
  
  <!-- EN:
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>damaged_past(p=2)->poked</li>
    <li>damaged_past(p=2)->jabbed</li>
    <li>damaged_past->prodded</li>
    <li>damaged_past->shoved</li>
    <li>damaged_past->stabbed</li>
 	<li>damaged_inf(p=2)->poke</li>
    <li>damaged_inf(p=2)->jab</li>
    <li>damaged_inf->prod</li>
    <li>damaged_inf->shove</li>
    <li>damaged_inf->stab</li>   
    <li>damaged_present(p=2)->poking</li>
    <li>damaged_present(p=2)->jabbing</li>
    <li>damaged_present->prodding</li>
    <li>damaged_present->shoving</li>
    <li>damaged_present->stabbing</li>	
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>	
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Poke.rulePack.rulesStrings>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una contusione enorme</li>
    <li>flavortext_consequence->lasciando il punto visibilmente deformato</li>
    <li>flavortext_consequence->facendo perdere l'equilibrio a [RECIPIENT_objective]</li>
    <li>flavortext_consequence->buttando [RECIPIENT_objective] di lato</li>
    <li>damaged_past(p=2)->infilzato</li>
    <li>damaged_past(p=2)->bucato</li>
    <li>damaged_past->trafitto</li>
    <li>damaged_past->trapassato</li>
    <li>damaged_past->penetrato</li>
	<li>damaged_inf(p=2)->infilzare</li>
    <li>damaged_inf(p=2)->bucare</li>
    <li>damaged_inf->trafiggere</li>
    <li>damaged_inf->trapassare</li>
    <li>damaged_inf->penetrare</li>
    <li>damaged_present(p=2)->infilzando</li>
    <li>damaged_present(p=2)->bucando</li>
    <li>damaged_present->trafiggendo</li>
    <li>damaged_present->trapassando</li>
    <li>damaged_present->penetrando</li>
    <li>destroyed_past->distrutto</li>
    <li>destroyed_past->spaccato</li>
    <li>destroyed_past->eliminato</li>
    <li>destroyed_past->annientato</li>
    <li>destroyed_past->spezzato</li>
    <li>destroyed_present->distruggendo</li>
    <li>destroyed_present->spaccando</li>
    <li>destroyed_present->eliminando</li>
    <li>destroyed_present->annientando</li>
    <li>destroyed_present->spezzando</li>
    <li>destroyed_suffix->in pezzi</li>
    <li>destroyed_suffix->in mille pezzi</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in una sottile nebbia</li>
    <li>destroyed_suffix->in frammenti</li>
  </Maneuver_Poke.rulePack.rulesStrings>
  
  <!-- EN:
 	<li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>   
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>	
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>	
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
  -->
  <Maneuver_Scratch.rulePack.rulesStrings>
	<li>woundname->ferita</li>
    <li>woundname(p=0.3)->piaga</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->con il sangue che gronda dalla [woundname]</li>
    <li>flavortext_situation->con i fluidi che grondano dalla [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->ed esponendo la carne sottostante</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->ed esponendo i congegni sottostanti</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->e lasciando una [woundname] insanguinata</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in miseri brandelli</li>
    <li>destroyed_suffix->a strisce</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in miseri brandelli</li>
    <li>destroyed_suffix->a pezzi</li>
    <li>destroyed_suffix->in frammenti</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in un ammasso di sangue</li>
  </Maneuver_Scratch.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_past(p=4)->scratched</li>
    <li>damaged_past(deflected!=True)->lacerated</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_past->cut</li>
	<li>damaged_inf(p=4)->scratch</li>
    <li>damaged_inf(deflected!=True)->lacerate</li>
    <li>damaged_inf(deflected!=True)->tear</li>
    <li>damaged_inf->cut</li>    
    <li>damaged_present->scratching</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present->cutting</li>	
    <li>destroyed_past->mauled</li>
    <li>destroyed_past->lacerated</li>
    <li>destroyed_past->tore off</li>
    <li>destroyed_past->shredded</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_present->mauling</li>
    <li>destroyed_present->lacerating</li>
    <li>destroyed_present->tearing off</li>
    <li>destroyed_present->shredding</li>
    <li>destroyed_present->ripping</li>
  -->
  <Maneuver_Scratch_Damage.rulePack.rulesStrings>
    <li>damaged_past(p=4)->graffiato</li>
    <li>damaged_past(deflected!=True)->lacerato</li>
    <li>damaged_past(deflected!=True)->strappato</li>
    <li>damaged_past->tagliato</li>
	<li>damaged_inf(p=4)->graffiare</li>
    <li>damaged_inf(deflected!=True)->lacerare</li>
    <li>damaged_inf(deflected!=True)->strappare</li>
    <li>damaged_inf->tagliare</li>
    <li>damaged_present->graffiando</li>
    <li>damaged_present(deflected!=True)->lacerando</li>
    <li>damaged_present(deflected!=True)->strappando</li>
    <li>damaged_present->tagliando</li>
    <li>destroyed_past->dilaniato</li>
    <li>destroyed_past->squarciato</li>
    <li>destroyed_past->strappato via</li>
    <li>destroyed_past->stracciato</li>
    <li>destroyed_past->squartato</li>
    <li>destroyed_present->dilaniando</li>
    <li>destroyed_present->squarciando</li>
    <li>destroyed_present->strappando via</li>
    <li>destroyed_present->stracciando</li>
    <li>destroyed_present->squartando</li>
  </Maneuver_Scratch_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
    <li>flavortext_situation->with fluids dripping from the [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>
    <li>damaged_past(p=4)->slashed</li>
    <li>damaged_past->cut</li>
    <li>damaged_past->chopped</li>
    <li>damaged_past->hacked</li>
    <li>damaged_past->sliced</li>
    <li>damaged_past(deflected!=True)->gashed</li>
 	<li>damaged_inf(p=4)->slash</li>   
    <li>damaged_inf->cut</li>
    <li>damaged_inf->chop</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->slice</li>
    <li>damaged_inf(deflected!=True)->gash</li>	
    <li>damaged_present->slashing</li>
    <li>damaged_present->cutting</li>
    <li>damaged_present->slicing</li>
    <li>damaged_present(deflected!=True)->gashing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present(deflected!=True)->lacerating</li>	
    <li>destroyed_past->bisected</li>
    <li>destroyed_past->divided</li>
    <li>destroyed_past->halved</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->split</li>
    <li>destroyed_present->bisecting</li>
    <li>destroyed_present->dividing</li>
    <li>destroyed_present->halving</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->splitting</li>
    <li>destroyed_suffix->into neat pieces</li>
    <li>destroyed_suffix->cleanly</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
  -->
  <Maneuver_Slash.rulePack.rulesStrings>
	<li>woundname->ferita</li>
    <li>woundname(p=0.3)->piaga</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->con il sangue che gronda dalla [woundname]</li>
    <li>flavortext_situation->con i fluidi che grondano dalla [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->esponendo la carne sottostante</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->esponendo i congegni sottostanti</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una [woundname] insanguinata</li>
    <li>damaged_past(p=4)->tranciato</li>
    <li>damaged_past->reciso</li>
    <li>damaged_past->troncato</li>
    <li>damaged_past->tagliato</li>
    <li>damaged_past->affettato</li>
    <li>damaged_past(deflected!=True)->squarciato</li>
	<li>damaged_inf(p=4)->tranciare</li>
    <li>damaged_inf->recidere</li>
    <li>damaged_inf->troncare</li>
    <li>damaged_inf->affettare</li>
    <li>damaged_inf(deflected!=True)->squarciare</li>
    <li>damaged_present->tranciando</li>
    <li>damaged_present->recidendo</li>
    <li>damaged_present->troncando</li>
    <li>damaged_present(deflected!=True)->tagliando</li>
    <li>damaged_present(deflected!=True)->affettando</li>
    <li>damaged_present(deflected!=True)->squarciando</li>
    <li>destroyed_past->diviso in due</li>
    <li>destroyed_past->tagliato in due</li>
    <li>destroyed_past->dimezzato</li>
    <li>destroyed_past->separato</li>
    <li>destroyed_past->spaccato</li>
    <li>destroyed_present->dividendo in due</li>
    <li>destroyed_present->tagliando in due</li>
    <li>destroyed_present->dimezzando</li>
    <li>destroyed_present->separando</li>
    <li>destroyed_present->spaccando</li>
    <li>destroyed_suffix->in pezzi precisi</li>
    <li>destroyed_suffix->in maniera precisa</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->esponendo i suoi meccanismi interni</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->dividendolo in due</li>
  </Maneuver_Slash.rulePack.rulesStrings>
  
  <!-- EN:
	<li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>    
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Smash.rulePack.rulesStrings>
	<li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una contusione enorme</li>   
    <li>flavortext_consequence->lasciando il punto visibilmente deformato</li>
    <li>flavortext_consequence->facendo perdere l'equilibrio a [RECIPIENT_objective]</li>
    <li>flavortext_consequence->buttando [RECIPIENT_objective] di lato</li>
    <li>destroyed_suffix->in pezzi</li>
    <li>destroyed_suffix->in mille pezzi</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->in una sottile nebbia</li>
    <li>destroyed_suffix->in frammenti</li>
  </Maneuver_Smash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_past(p=4)->smashed</li>
    <li>damaged_past->bashed</li>
    <li>damaged_past->clobbered</li>
    <li>damaged_past->slammed</li>
    <li>damaged_past->struck</li>
 	<li>damaged_inf(p=4)->smash</li>
    <li>damaged_inf->bash</li>
    <li>damaged_inf->clobber</li>
    <li>damaged_inf->slam</li>
    <li>damaged_inf->strike</li>   
    <li>damaged_present->smashing</li>
    <li>damaged_present->bashing</li>
    <li>damaged_present->clobbering</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>damaged_present(deflected!=True)->lacerating</li>	
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
  -->
  <Maneuver_Smash_Damage.rulePack.rulesStrings>
    <li>damaged_past(p=4)->fracassato</li>
    <li>damaged_past->spappolato</li>
    <li>damaged_past->maciullato</li>
    <li>damaged_past->frantumato</li>
    <li>damaged_past->spezzato</li>
	<li>damaged_inf(p=4)->fracassare</li>
    <li>damaged_inf->spappolare</li>
    <li>damaged_inf->maciullare</li>
    <li>damaged_inf->frantumare</li>
    <li>damaged_inf->spezzare</li>
    <li>damaged_present->fracassando</li>
    <li>damaged_present->spappolando</li>
    <li>damaged_present->maciullando</li>
    <li>damaged_present(deflected!=True)->frantumando</li>
    <li>damaged_present(deflected!=True)->spezzando</li>
    <li>destroyed_past->distrutto</li>
    <li>destroyed_past->tritato</li>
    <li>destroyed_past->eliminato</li>
    <li>destroyed_past->annientato</li>
    <li>destroyed_past->spaccato</li>
    <li>destroyed_present->distruggendo</li>
    <li>destroyed_present->tritando</li>
    <li>destroyed_present->eliminando</li>
    <li>destroyed_present->annientando</li>
    <li>destroyed_present->spaccando</li>
  </Maneuver_Smash_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>woundname->hole</li>
    <li>woundname->wound</li>
    <li>woundname->crevice</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
    <li>damaged_past(p=4)->stabbed</li>
    <li>damaged_past->jabbed</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->punctured</li>
    <li>damaged_past(deflected!=True)->skewered</li>
 	<li>damaged_inf(p=4)->stab</li>
    <li>damaged_inf->jab</li>
    <li>damaged_inf(deflected!=True)->pierce</li>
    <li>damaged_inf(deflected!=True)->puncture</li>
    <li>damaged_inf(deflected!=True)->skewer</li>   
    <li>damaged_present(deflected!=True)->piercing</li>
    <li>damaged_present(deflected!=True)->puncturing</li>
    <li>damaged_present(deflected!=True)->penetrating</li>
    <li>damaged_present(deflected!=True)->skewering</li>	
    <li>destroyed_past->impaled</li>
    <li>destroyed_past->perforated</li>
    <li>destroyed_past->skewered</li>	
    <li>destroyed_present->impaling</li>
    <li>destroyed_present->perforating</li>
    <li>destroyed_present->skewering</li>
    <li>destroyed_suffix->straight through</li>
    <li>destroyed_suffix->leaving a clean hole</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
  -->
  <Maneuver_Stab.rulePack.rulesStrings>
	<li>woundname->ferita</li>
    <li>woundname(p=0.3)->piaga</li>
    <li>woundname(p=0.3)->fessura</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una [woundname] insanguinata</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una [woundname] strappata</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->lasciando una [woundname] sanguinante</li>
    <li>damaged_past(p=4)->pugnalato</li>
    <li>damaged_past->accoltellato</li>
    <li>damaged_past(deflected!=True)->trafitto</li>
    <li>damaged_past(deflected!=True)->perforato</li>
    <li>damaged_past(deflected!=True)->infilzato</li>
	<li>damaged_inf(p=4)->pugnalare</li>
    <li>damaged_inf->accoltellare</li>
    <li>damaged_inf(deflected!=True)->trafiggere</li>
    <li>damaged_inf(deflected!=True)->perforare</li>
    <li>damaged_inf(deflected!=True)->infilzare</li>
    <li>damaged_present(deflected!=True)->trafiggendo</li>
    <li>damaged_present(deflected!=True)->perforando</li>
    <li>damaged_present(deflected!=True)->penetrando</li>
    <li>damaged_present(deflected!=True)->infilzando</li>
    <li>destroyed_past->impalato</li>
    <li>destroyed_past->perforato</li>
    <li>destroyed_past->trafitto</li>
    <li>destroyed_present->impalando</li>
    <li>destroyed_present->perforando</li>
    <li>destroyed_present->trafiggendo</li>
    <li>destroyed_suffix->dritto dentro</li>
    <li>destroyed_suffix->lasciando un foro preciso</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->lasciandolo gocciolare fluidi sanguinanti</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->lasciandolo gocciolare fluidi irriconoscibili</li>
  </Maneuver_Stab.rulePack.rulesStrings>
  
</LanguageData>